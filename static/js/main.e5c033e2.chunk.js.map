{"version":3,"sources":["serviceWorker.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","Todolist/AddItemForm/AddItemForm.tsx","Todolist/EditableSpan.tsx","Todolist/task/Task.tsx","Todolist/Todolist.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TASKS_ACTIONS_TYPES","initialState","REMOVE_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","v1","AddItemForm","React","memo","props","console","log","useState","taskTitle","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","title","editMode","setEditMode","changeTaskTitle","autoFocus","onBlur","onDoubleClick","Task","onAllClickHandler","useCallback","removeTask","task","id","todolistId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","onTitleChangeHandler","newTitle","className","isDone","Checkbox","Delete","TodoList","tasksForTodolist","tasks","filter","item","renderTasks","map","removeTasks","changeTitle","addTask","addTasks","changeTodoListTitle","changeFilter","onActiveClickHandler","onCompletedClickHandler","deleteTodolist","Button","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","todolistID","action","type","REMOVE_TASK","removeTaskAC","ADD_TASK","addTaskAC","changeStatus","CHANGE_TASK_STATUS","changeTaskStatusAC","CHANGE_TASK_TITLE","changeTaskTitleAC","ChangeTodolistFilterAC","todoListId","ChangeTodolistTitleAC","addTodoList","AddTodolistAC","todolistItems","Grid","Paper","style","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","newTodolist","todolist","find","copyState","newTask","todolistTasks","newTasksArray","t","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e5c033e2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useDispatch } from 'react-redux';\r\nimport { v1 } from 'uuid';\r\nimport { TasksStateType } from '../App';\r\nimport { TaskType } from '../Todolist/Todolist';\r\nimport { AddTodolistACType, RemoveTodoListAcionType } from './todolists-reducer';\r\n\r\n\r\nenum TASKS_ACTIONS_TYPES {\r\n\tREMOVE_TASK = 'REMOVE-TASK',\r\n\tADD_TASK = 'ADD-TASK',\r\n\tCHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS',\r\n\tCHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE',\r\n\tREMOVE_TODOLIST = 'REMOVE-TODOLIST',\r\n\tADD_TODOLIST = 'ADD-TODOLIST',\r\n\r\n}\r\n\r\ntype removeTaskAC = ReturnType<typeof removeTaskAC>;\r\ntype addTaskAC = ReturnType<typeof addTaskAC>;\r\ntype changeTaskStatusAC = ReturnType<typeof changeTaskStatusAC>;\r\ntype changeTaskTitleAC = ReturnType<typeof changeTaskTitleAC>;\r\n\r\n\r\ntype ActionType = removeTaskAC | addTaskAC | changeTaskStatusAC | changeTaskTitleAC | AddTodolistACType | RemoveTodoListAcionType;\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType) => {\r\n\tswitch (action.type) {\r\n\t\tcase TASKS_ACTIONS_TYPES.REMOVE_TASK: {\r\n\t\t\tlet copyState = { ...state };\r\n\t\t\tcopyState[action.todolistId] = state[action.todolistId].filter(item => item.id !== action.id);\r\n\t\t\treturn copyState;\r\n\t\t}\r\n\t\tcase TASKS_ACTIONS_TYPES.ADD_TASK: {\r\n\t\t\tlet newTask: TaskType = { id: v1(), title: action.title, isDone: false };\r\n\t\t\treturn { ...state, [action.todolistId]: [newTask, ...state[action.todolistId]] }\r\n\t\t}\r\n\t\tcase TASKS_ACTIONS_TYPES.CHANGE_TASK_STATUS: {\r\n\t\t\tlet todolistTasks = state[action.todolistId]\r\n\t\t\tlet newTasksArray = todolistTasks\r\n\t\t\t\t.map(t => t.id === action.id ? { ...t, isDone: action.isDone } : t);\r\n\t\t\tstate[action.todolistId] = newTasksArray;\r\n\t\t\treturn { ...state };\r\n\t\t}\r\n\t\tcase TASKS_ACTIONS_TYPES.CHANGE_TASK_TITLE: {\r\n\t\t\tlet todolistTasks = state[action.todolistId]\r\n\t\t\tlet newTasksArray = todolistTasks\r\n\t\t\t\t.map(t => t.id === action.id ? { ...t, title: action.newTitle } : t);\r\n\r\n\t\t\tstate[action.todolistId] = newTasksArray;\r\n\t\t\treturn { ...state }\r\n\t\t}\r\n\t\tcase TASKS_ACTIONS_TYPES.ADD_TODOLIST:\r\n\t\t\tlet todolistId = action.todolistId;\r\n\t\t\treturn { ...state, [todolistId]: [] }\r\n\t\tcase TASKS_ACTIONS_TYPES.REMOVE_TODOLIST:\r\n\t\t\tlet copyState = { ...state };\r\n\t\t\tdelete copyState[action.id];\r\n\t\t\treturn copyState;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\nexport const removeTaskAC = (id: string, todolistId: string) => {\r\n\treturn { type: TASKS_ACTIONS_TYPES.REMOVE_TASK, id, todolistId } as const\r\n}\r\n\r\nexport const addTaskAC = (title: string, todolistId: string) => {\r\n\treturn { type: TASKS_ACTIONS_TYPES.ADD_TASK, title, todolistId } as const\r\n}\r\n\r\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todolistId: string) => {\r\n\treturn { type: TASKS_ACTIONS_TYPES.CHANGE_TASK_STATUS, id, isDone, todolistId } as const\r\n}\r\n\r\nexport const changeTaskTitleAC = (id: string, newTitle: string, todolistId: string) => {\r\n\treturn { type: TASKS_ACTIONS_TYPES.CHANGE_TASK_TITLE, id, newTitle, todolistId } as const\r\n}\r\n","import { v1 } from 'uuid';\r\nimport { FilterValuesType, TodolistType } from '../App';\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST';\r\nexport const ADD_TODOLIST = 'ADD-TODOLIST';\r\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE';\r\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER';\r\n\r\nexport type RemoveTodoListAcionType = ReturnType<typeof RemoveTodolistAC>\r\nexport type AddTodolistACType = ReturnType<typeof AddTodolistAC>;\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof ChangeTodolistTitleAC>;\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof ChangeTodolistFilterAC>;\r\n\r\n\r\ntype ActionType = RemoveTodoListAcionType | AddTodolistACType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\r\n\r\nexport let todolistID_1 = v1();\r\nexport let todolistID_2 = v1();\r\n\r\n\r\nconst initialState: TodolistType[] = [];\r\n\r\n\r\nexport const todoListsReducer = (state: TodolistType[] = initialState, action: ActionType): TodolistType[] => {\r\n\tswitch (action.type) {\r\n\t\tcase REMOVE_TODOLIST:\r\n\t\t\treturn state.filter(item => item.id !== action.id);\r\n\t\tcase ADD_TODOLIST:\r\n\t\t\tconst newTodolist: TodolistType = {\r\n\t\t\t\tid: action.todolistId,\r\n\t\t\t\ttitle: action.title,\r\n\t\t\t\tfilter: 'all',\r\n\t\t\t}\r\n\t\t\treturn [newTodolist, ...state]\r\n\t\tcase CHANGE_TODOLIST_TITLE:\r\n\t\t\tlet todolist = state.find(item => item.id === action.todoListId)\r\n\t\t\tif (todolist) {\r\n\t\t\t\ttodolist.title = action.newTitle;\r\n\t\t\t\treturn [...state]\r\n\t\t\t}\r\n\t\t\treturn state\r\n\t\tcase CHANGE_TODOLIST_FILTER: {\r\n\t\t\tlet todolist = state.find(item => item.id === action.todolistID)\r\n\t\t\tif (todolist) {\r\n\t\t\t\ttodolist.filter = action.value;\r\n\t\t\t\treturn [...state]\r\n\t\t\t}\r\n\t\t\treturn state\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const RemoveTodolistAC = (id: string) => {\r\n\treturn { type: REMOVE_TODOLIST, id } as const\r\n}\r\n\r\nexport const AddTodolistAC = (title: string) => {\r\n\treturn { type: ADD_TODOLIST, title, todolistId: v1() } as const;\r\n}\r\n\r\nexport const ChangeTodolistTitleAC = (newTitle: string, todoListId: string) => {\r\n\treturn { type: CHANGE_TODOLIST_TITLE, newTitle, todoListId } as const;\r\n}\r\n\r\nexport const ChangeTodolistFilterAC = (value: FilterValuesType, todolistID: string) => {\r\n\treturn { type: CHANGE_TODOLIST_FILTER, value, todolistID } as const;\r\n}\r\n\r\n","import { Button, IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox, Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\n\r\nexport type AddItemFormPropsType = {\r\n\taddItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n\tconsole.log('AddItemForm called');\r\n\r\n\tlet [taskTitle, setTitle] = useState<string>('');\r\n\tlet [error, setError] = useState<string | null>(null)\r\n\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (error !== null) setError(null);\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\taddItem()\r\n\t\t}\r\n\t}\r\n\r\n\tlet addItem = () => {\r\n\t\tconst trimmedTitle = taskTitle.trim();\r\n\t\tif (trimmedTitle) {\r\n\t\t\tprops.addItem(trimmedTitle)\r\n\t\t} else {\r\n\t\t\tsetError('Title is required')\r\n\t\t}\r\n\t\tsetTitle('')\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\tsize='small'\r\n\t\t\t\tvariant='outlined'\r\n\t\t\t\tvalue={taskTitle}\r\n\t\t\t\tonChange={onChangeHandler}\r\n\t\t\t\tonKeyPress={onKeyPressHandler}\r\n\t\t\t\terror={!!error}\r\n\t\t\t\tlabel='Title'\r\n\t\t\t\thelperText={error} />\r\n\t\t\t<IconButton color='primary' onClick={addItem}>\r\n\t\t\t\t<AddBox />\r\n\t\t\t</IconButton>\r\n\t\t</div >\r\n\t)\r\n})\r\n\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\n\r\n\r\nexport type EditableSpanPropsType = {\r\n\ttitle: string\r\n\tchangeTaskTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\tconsole.log('EditableSpan called');\r\n\r\n\r\n\tlet [title, setTitle] = useState(props.title);\r\n\tlet [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n\r\n\tconst onIditMode = () => {\r\n\t\tsetEditMode(true)\r\n\t}\r\n\tconst offIditMode = () => {\r\n\t\tsetEditMode(false)\r\n\t\tprops.changeTaskTitle(title)\r\n\t}\r\n\r\n\r\n\tconst changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tsetEditMode(false)\r\n\t\t\tprops.changeTaskTitle(title)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\teditMode\r\n\t\t\t? <TextField variant='outlined' size='small' value={title} onChange={changeTitle} onKeyPress={onKeyPress} autoFocus onBlur={offIditMode} />\r\n\t\t\t: <span onDoubleClick={onIditMode}>{props.title}</span>\r\n\r\n\t)\r\n}\r\n)\r\n","import { Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useCallback } from 'react';\r\nimport { EditableSpan } from '../EditableSpan';\r\nimport { TaskType } from '../Todolist';\r\n\r\nexport type TaskPropsType = {\r\n\ttask: TaskType\r\n\ttodolistId: string\r\n\tchangeTaskStatus: (id: string, newIsDoneValue: boolean, todolistId: string) => void\r\n\tchangeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n\tremoveTask: (taskId: string, todolistId: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\tconsole.log('Task is called');\r\n\r\n\tconst onAllClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId),\r\n\t\t[props.task.id, props.todolistId])\r\n\r\n\tconst onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tlet newIsDoneValue = e.currentTarget.checked;\r\n\t\tprops.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n\t}, [props.task.id, props.changeTaskStatus, props.todolistId])\r\n\r\n\r\n\tconst onTitleChangeHandler = useCallback((newTitle: string) => {\r\n\t\tprops.changeTaskTitle(props.task.id, newTitle, props.todolistId)\r\n\t}, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n\treturn (\r\n\t\t<div key={props.task.id} className={props.task.isDone ? 'is_done' : ''}>\r\n\t\t\t<Checkbox color='primary' checked={props.task.isDone} onChange={onChangeHandler} />\r\n\t\t\t<EditableSpan title={props.task.title} changeTaskTitle={onTitleChangeHandler} />\r\n\t\t\t<IconButton onClick={onAllClickHandler}>\r\n\t\t\t\t<Delete />\r\n\t\t\t</IconButton>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\n\r\n","import { Button, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useCallback } from 'react';\r\nimport { FilterValuesType } from '../App';\r\nimport { AddItemForm } from './AddItemForm/AddItemForm';\r\nimport { EditableSpan } from './EditableSpan';\r\nimport { Task } from './task/Task';\r\n\r\nexport type TaskType = {\r\n\tid: string,\r\n\ttitle: string,\r\n\tisDone: boolean,\r\n}\r\n\r\nexport type TodolistPropsType = {\r\n\tid: string\r\n\ttitle: string\r\n\ttasks: Array<TaskType>\r\n\tfilter: FilterValuesType\r\n\tremoveTasks: (taskId: string, todolistID: string) => void\r\n\tchangeFilter: (value: FilterValuesType, todolistID: string) => void\r\n\taddTasks: (title: string, todolistID: string) => void\r\n\tchangeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\r\n\tdeleteTodolist: (todolistID: string) => void\r\n\tchangeTodoListTitle: (newTitle: string, todoListId: string) => void\r\n\tchangeTitle: (id: string, title: string, todolistID: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodolistPropsType) => {\r\n\tconsole.log('TodoList called');\r\n\r\n\r\n\tlet tasksForTodolist = props.tasks;\r\n\r\n\tif (props.filter === 'active') {\r\n\t\ttasksForTodolist = props.tasks.filter(item => item.isDone === false)\r\n\t}\r\n\tif (props.filter === 'completed') {\r\n\t\ttasksForTodolist = props.tasks.filter(item => item.isDone === true)\r\n\t}\r\n\r\n\r\n\tconst renderTasks = tasksForTodolist.map(item => {\r\n\r\n\t\treturn (<Task\r\n\t\t\tkey={item.id}\r\n\t\t\ttask={item}\r\n\t\t\ttodolistId={props.id}\r\n\t\t\tremoveTask={props.removeTasks}\r\n\t\t\tchangeTaskTitle={props.changeTitle}\r\n\t\t\tchangeTaskStatus={props.changeTaskStatus} />\r\n\t\t)\r\n\t})\r\n\r\n\tconst addTask = useCallback((title: string) => { props.addTasks(title, props.id) }, [props.addTasks, props.id])\r\n\tconst deleteTodolistButton = () => props.deleteTodolist(props.id);\r\n\tconst changeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(title, props.id), [props.changeTodoListTitle, props.id]);\r\n\r\n\r\n\tconst onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id]);\r\n\tconst onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id]);\r\n\tconst onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id]);\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3>\r\n\t\t\t\t<EditableSpan title={props.title} changeTaskTitle={changeTodoListTitle} />\r\n\t\t\t\t<IconButton onClick={deleteTodolistButton}>\r\n\t\t\t\t\t<Delete />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</h3>\r\n\t\t\t<AddItemForm addItem={addTask} />\r\n\t\t\t<div>\r\n\t\t\t\t{renderTasks}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Button variant={props.filter === 'all' ? 'outlined' : 'text'} color='default' onClick={onAllClickHandler}>All</Button>\r\n\t\t\t\t<Button variant={props.filter === 'active' ? 'outlined' : 'text'} color='primary' onClick={onActiveClickHandler}>Active</Button>\r\n\t\t\t\t<Button variant={props.filter === 'completed' ? 'outlined' : 'text'} color='secondary' onClick={onCompletedClickHandler}>Completed</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\n\r\nexport default TodoList;","import { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport React, { useCallback, useReducer, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport { AppRootStateType } from './state/store';\r\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './state/tasks-reducer';\r\nimport { AddTodolistAC, ChangeTodolistFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC } from './state/todolists-reducer';\r\nimport { AddItemForm } from './Todolist/AddItemForm/AddItemForm';\r\nimport TodoList, { TaskType } from './Todolist/Todolist';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst AppWithRedux = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistType[]>((state) => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>((state) => state.tasks);\r\n\r\n\r\n\r\n\r\n\r\n    const removeTasks = useCallback((id: string, todolistID: string) => { // yes\r\n        const action = removeTaskAC(id, todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTasks = useCallback((title: string, todolistID: string) => {  // yes\r\n        const action = addTaskAC(title, todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistID: string) => {  // yes\r\n        const action = changeTaskStatusAC(id, isDone, todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTitle = useCallback((id: string, newTitle: string, todolistID: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistID: string) => {  // yes\r\n        const action = ChangeTodolistFilterAC(value, todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string, todoListId: string) => {\r\n        const action = ChangeTodolistTitleAC(newTitle, todoListId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const deleteTodolist = useCallback((todolistID: string) => {  // yes\r\n        const action = RemoveTodolistAC(todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => { // yes\r\n        const action = AddTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n\r\n    const todolistItems = todolists.map(item => {\r\n\r\n        let tasksForTodolist = tasks[item.id];\r\n\r\n\r\n        return <Grid item>\r\n            <Paper style={{ padding: \"10px\" }}>\r\n                <TodoList\r\n                    key={item.id}\r\n                    id={item.id}\r\n                    filter={item.filter}\r\n                    title={item.title}\r\n                    tasks={tasksForTodolist}\r\n                    changeTitle={changeTitle}\r\n                    addTasks={addTasks}\r\n                    removeTasks={removeTasks}\r\n                    changeFilter={changeFilter}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                    changeTaskStatus={changeStatus}\r\n                    deleteTodolist={deleteTodolist}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant='h6'>\r\n                        News\r\n                    </Typography>\r\n                    <Button color='inherit'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: '20px' }}>\r\n                    <AddItemForm addItem={addTodoList} />\r\n                </Grid>\r\n                <Grid>\r\n                    <Grid container spacing={3}>\r\n                        {todolistItems}\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { tasksReducer } from \"./tasks-reducer\";\r\nimport { todoListsReducer } from \"./todolists-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodolists: todoListsReducer,\r\n\ttasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithReducers from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<AppWithRedux />\r\n\t</Provider>\r\n\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
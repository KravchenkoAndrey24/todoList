{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","stateDraft","action","payload","value","actions","authReducer","reducer","isInitialized","setAppIsInitialized","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","state","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","type","getFieldProps","touched","FormControlLabel","control","handleChange","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.768c45dc.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '2d65fe0a-1514-46af-a3fa-b8e3058ff155'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title });\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, { title: title });\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeGetType>>('auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseLoginType = {\r\n    resultCode: number\r\n    messages: []\r\n    data: {\r\n        userId: number\r\n    }\r\n}\r\n\r\nexport type AuthMeGetType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { ResponseType } from '../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({ error: data.messages[0] }))\r\n    } else {\r\n        dispatch(setAppErrorAC({ error: 'Some error occurred' }))\r\n    }\r\n    dispatch(setAppStatusAC({ status: 'failed' }))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({ error: error.message ? error.message : 'Some error occurred' }))\r\n    dispatch(setAppStatusAC({ status: 'failed' }))\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { Dispatch } from 'redux'\r\nimport { authAPI, LoginParamsType } from '../../api/todolists-api'\r\nimport { setAppStatusAC } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState = {\r\n\tisLoggedIn: false\r\n}\r\n//type InitialStateType = typeof initialState\r\n\r\n\r\nconst slice = createSlice({\r\n\tname: 'auth',\r\n\tinitialState: initialState,\r\n\treducers: {\r\n\t\tsetIsLoggedInAC(stateDraft, action: PayloadAction<{ value: boolean }>) {\r\n\t\t\tstateDraft.isLoggedIn = action.payload.value;\r\n\t\t}\r\n\t}\r\n})\r\nexport const { setIsLoggedInAC } = slice.actions;\r\n\r\nexport const authReducer = slice.reducer;\r\n/* (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'login/SET-IS-LOGGED-IN':\r\n\t\t\treturn { ...state, isLoggedIn: action.value }\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n} */\r\n// actions\r\n//export const setIsLoggedInAC = (value: boolean) => ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n\tdispatch(setAppStatusAC({ status: 'loading' }))\r\n\tauthAPI.login(data)\r\n\t\t.then(res => {\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(setIsLoggedInAC({ value: true }))\r\n\t\t\t\tdispatch(setAppStatusAC({ status: 'succeeded' }))\r\n\t\t\t} else {\r\n\t\t\t\thandleServerAppError(res.data, dispatch);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n\tdispatch(setAppStatusAC({ status: 'loading' }))\r\n\tauthAPI.logout()\r\n\t\t.then(res => {\r\n\t\t\tif (res.data.resultCode === 0) {\r\n\t\t\t\tdispatch(setIsLoggedInAC({ value: true }))\r\n\t\t\t\tdispatch(setAppStatusAC({ status: 'succeeded' }))\r\n\t\t\t} else {\r\n\t\t\t\thandleServerAppError(res.data, dispatch)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\thandleServerNetworkError(error, dispatch)\r\n\t\t})\r\n}\r\n\r\n\r\n// types\r\n//type ActionsType = SetAppStatusActionType | SetAppErrorActionType","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/todolists-api\"\r\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\"\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(stateDraft, action: PayloadAction<{ error: string | null }>) {\r\n            stateDraft.error = action.payload.error;\r\n        },\r\n        setAppStatusAC(stateDraft, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            stateDraft.status = action.payload.status;\r\n        },\r\n        setAppIsInitialized(stateDraft, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            stateDraft.isInitialized = action.payload.isInitialized;\r\n        },\r\n    }\r\n})\r\n\r\nexport const { setAppErrorAC, setAppStatusAC, setAppIsInitialized } = slice.actions;\r\n\r\n\r\nexport const appReducer = slice.reducer;\r\n/* (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case 'APP/SET-INIT':\r\n            return { ...state, isInitialized: action.isInitialized }\r\n        default:\r\n            return { ...state }\r\n    }\r\n} */\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n/* export const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppIsInitialized = (isInitialized: boolean) => ({ type: 'APP/SET-INIT', isInitialized } as const)\r\n */\r\n\r\n/* export type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppSetAppIsInitialized = ReturnType<typeof setAppIsInitialized>\r\n */\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({ value: true }));\r\n        } else {\r\n        }\r\n        dispatch(setAppIsInitialized({ isInitialized: true }));\r\n    })\r\n}\r\n\r\n\r\n\r\n/* type ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppSetAppIsInitialized */\r\n","import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RequestStatusType, setAppStatusAC } from '../../app/app-reducer'\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(stateDraft, action: PayloadAction<{ id: string }>) {\r\n            debugger\r\n            const index = stateDraft.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                stateDraft.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(stateDraft, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            stateDraft.unshift({ ...action.payload.todolist, filter: 'all', entityStatus: 'idle' })\r\n        },\r\n        changeTodolistTitleAC(stateDraft, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = stateDraft.findIndex(tl => tl.id === action.payload.id);\r\n            stateDraft[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(stateDraft, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = stateDraft.findIndex(tl => tl.id === action.payload.id)\r\n            stateDraft[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(stateDraft, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = stateDraft.findIndex(tl => tl.id === action.payload.id)\r\n            stateDraft[index].entityStatus = action.payload.status;\r\n        },\r\n        setTodolistsAC(stateDraft, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        },\r\n    }\r\n})\r\n\r\nexport const { removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC } = slice.actions;\r\n\r\nexport const todolistsReducer = slice.reducer;\r\n\r\n/* export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.status } : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        default:\r\n            return state\r\n    }\r\n} */\r\n\r\n// actions\r\n/* export const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\n */\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({ status: 'loading' }))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({ todolists: res.data }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({ status: 'loading' }))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({ id: todolistId, status: 'loading' }))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({ id: todolistId }))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({ status: 'loading' }))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({ todolist: res.data.data.item }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({ id, title }))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import { addTodolistAC, AddTodolistActionType, removeTodolistAC, RemoveTodolistActionType, setTodolistsAC, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setAppStatusAC } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(stateDraft, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            debugger\r\n            const tasks = stateDraft[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(stateDraft, action: PayloadAction<{ task: TaskType }>) {\r\n            stateDraft[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(stateDraft, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = stateDraft[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index] = { ...tasks[index], ...action.payload.model };\r\n            }\r\n\r\n        },\r\n        setTasksAC(stateDraft, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            stateDraft[action.payload.todolistId] = action.payload.tasks;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (stateDraft, action) => {\r\n            stateDraft[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (stateDraft, action) => {\r\n            delete stateDraft[action.payload.id];\r\n        });\r\n        builder.addCase(setTodolistsAC, (stateDraft, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                stateDraft[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n    /* extraReducers: {\r\n        [addTodolistAC.type]: (state, action: PayloadAction<{}>) => { },\r\n        [removeTodolistAC.type]: (state, action: PayloadAction<{}>) => { },\r\n        [setTodolistsAC.type]: (state, action: PayloadAction<{}>) => { }\r\n    } */\r\n})\r\n\r\nexport const { removeTaskAC, addTaskAC, updateTaskAC, setTasksAC } = slice.actions;\r\nexport const tasksReducer = slice.reducer;\r\n\r\n/* \r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? { ...t, ...action.model } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = { ...state }\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return { ...state, [action.todolistId]: action.tasks }\r\n        default:\r\n            return state\r\n    }\r\n} */\r\n\r\n// actions\r\n/* export const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({ type: 'UPDATE-TASK', model, todolistId, taskId } as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({ type: 'SET-TASKS', tasks, todolistId } as const) */\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({ tasks, todolistId }))\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({ taskId, todolistId })\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({ task })\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({ taskId, model: domainModel, todolistId })\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ demo = false, ...props }: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n\r\n\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, { status }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, { title: newTitle }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({ id: todolistId, filter: value })\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{ padding: '20px' }}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: '10px' }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setAppErrorAC } from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({ error: null }));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { loginTC } from './auth-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router'\r\n\r\ntype FormikErrorType = {\r\n\temail?: string\r\n\tpassword?: string\r\n\trememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\tconst dispatch = useDispatch();\r\n\r\n\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {}\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'Required'\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address';\r\n\t\t\t}\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Введите ваш пароль'\r\n\t\t\t} /* else if (!/^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&*])(?=.*[0-9].*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{8,}$/i.test(values.password)) {\r\n\t\t\t\terrors.password = 'Invalid password'\r\n\t\t\t} */\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(loginTC(values));\r\n\t\t\tformik.resetForm();\r\n\t\t}\r\n\t})\r\n\r\n\r\n\tif (isLoggedIn) {\r\n\t\treturn <Redirect to={'/todoList'} />\r\n\t}\r\n\r\n\treturn <Grid container justify=\"center\">\r\n\t\t<Grid item xs={4}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<FormControl>\r\n\t\t\t\t\t<FormLabel>\r\n\t\t\t\t\t\t<p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n\t\t\t\t\t\t\t\ttarget={'_blank'}>here\r\n                    </a>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>or use common test account credentials:</p>\r\n\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\r\n\t\t\t\t\t\t<p>Password: free</p>\r\n\t\t\t\t\t</FormLabel>\r\n\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\ttype='email'\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t// name='email'\r\n\t\t\t\t\t\t// onBlur={formik.handleBlur}\r\n\t\t\t\t\t\t// onChange={formik.handleChange}\r\n\t\t\t\t\t\t// value={formik.values.email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.email && formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.password && formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tlabel={'Remember me'}\r\n\t\t\t\t\t\t\tcontrol={<Checkbox\r\n\t\t\t\t\t\t\t\tname='rememberMe'\r\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={formik.values.rememberMe}\r\n\t\t\t\t\t\t\t/>}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n\t\t\t\t\t</FormGroup>\r\n\t\t\t\t</FormControl>\r\n\t\t\t</form>\r\n\t\t</Grid>\r\n\t</Grid>\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport { Login } from '../features/Login/Login'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    const appLogOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={appLogOut} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/todoList'} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route exact path={'/login'} render={() => <Login />} />\r\n\r\n                    <Route exact path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Redirect from={'*'} to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport { authReducer } from '../features/Login/auth-reducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n})\r\n\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["Todolist/AddItemForm/AddItemForm.tsx","Todolist/EditableSpan.tsx","Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","taskTitle","setTitle","error","setError","addItem","trimmedTitle","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","title","editMode","setEditMode","changeTaskTitle","autoFocus","onBlur","onDoubleClick","TodoList","renderTasks","tasks","map","item","id","isDone","type","checked","newIsDoneValue","changeTaskStatus","newTitle","changeTitle","removeTasks","changeTodoListTitle","deleteTodolist","addTasks","filter","changeFilter","App","todolistID_1","v1","todolistID_2","todolists","setTodolists","setTasks","todolistID","filteredTasks","newTask","changeStatus","task","find","t","todolist","todoListId","todolistItems","allTasksForTodolist","tasksForTodolist","newTodoListId","newTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b66a4486.chunk.js","sourcesContent":["import React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n\taddItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n\tlet [taskTitle, setTitle] = useState<string>('');\r\n\tlet [error, setError] = useState<string | null>(null)\r\n\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tsetError(null)\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\taddItem()\r\n\t\t}\r\n\t}\r\n\r\n\tlet addItem = () => {\r\n\t\tconst trimmedTitle = taskTitle.trim();\r\n\t\tif (trimmedTitle) {\r\n\t\t\tprops.addItem(trimmedTitle)\r\n\t\t} else {\r\n\t\t\tsetError('Title is required')\r\n\t\t}\r\n\t\tsetTitle('')\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input value={taskTitle}\r\n\t\t\t\tonChange={onChangeHandler}\r\n\t\t\t\tonKeyPress={onKeyPressHandler}\r\n\t\t\t\tclassName={error ? 'error' : ''} />\r\n\t\t\t<button onClick={addItem}>+</button>\r\n\t\t\t{error && <div className='error_message'>{error}</div>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","import React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n\ttitle: string\r\n\tchangeTaskTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n\tlet [title, setTitle] = useState(props.title);\r\n\tlet [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n\r\n\tconst onIditMode = () => {\r\n\t\tsetEditMode(true)\r\n\t}\r\n\tconst offIditMode = () => {\r\n\t\tsetEditMode(false)\r\n\t\tprops.changeTaskTitle(title)\r\n\t}\r\n\r\n\r\n\tconst changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tsetEditMode(false)\r\n\t\t\tprops.changeTaskTitle(title)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\teditMode\r\n\t\t\t? <input value={title} onChange={changeTitle} onKeyPress={onKeyPress} autoFocus onBlur={offIditMode} />\r\n\t\t\t: <span onDoubleClick={onIditMode}>{props.title}</span>\r\n\r\n\t)\r\n}\r\n\r\n","import React, { ChangeEvent } from 'react';\r\nimport { FilterValuesType } from '../App';\r\nimport { AddItemForm } from './AddItemForm/AddItemForm';\r\nimport { EditableSpan } from './EditableSpan';\r\n\r\nexport type TaskType = {\r\n\tid: string,\r\n\ttitle: string,\r\n\tisDone: boolean,\r\n}\r\n\r\nexport type TodolistPropsType = {\r\n\tid: string\r\n\ttitle: string\r\n\ttasks: Array<TaskType>\r\n\tfilter: FilterValuesType\r\n\tremoveTasks: (taskId: string, todolistID: string) => void\r\n\tchangeFilter: (value: FilterValuesType, todolistID: string) => void\r\n\taddTasks: (title: string, todolistID: string) => void\r\n\tchangeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\r\n\tdeleteTodolist: (todolistID: string) => void\r\n\tchangeTodoListTitle: (newTitle: string, todoListId: string) => void\r\n\tchangeTitle: (id: string, title: string, todolistID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodolistPropsType) {\r\n\tconst renderTasks = props.tasks.map(item => {\r\n\r\n\t\tconst onAllClickHandler = () => {\r\n\t\t\tprops.removeTasks(item.id, props.id)\r\n\t\t}\r\n\t\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tlet newIsDoneValue = e.currentTarget.checked;\r\n\t\t\tprops.changeTaskStatus(item.id, newIsDoneValue, props.id)\r\n\t\t}\r\n\t\tconst changeTaskTitle = (newTitle: string) => {\r\n\t\t\tprops.changeTitle(item.id, newTitle, props.id)\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<li key={item.id} className={item.isDone ? 'is_done' : ''}>\r\n\t\t\t\t<input type='checkbox' checked={item.isDone} onChange={onChangeHandler} />\r\n\t\t\t\t<EditableSpan title={item.title} changeTaskTitle={changeTaskTitle} />\r\n\t\t\t\t<button onClick={onAllClickHandler}>X</button>\r\n\t\t\t</li>\r\n\t\t)\r\n\t})\r\n\r\n\tconst addTask = (title: string) => { props.addTasks(title, props.id) }\r\n\tconst deleteTodolistButton = () => props.deleteTodolist(props.id);\r\n\tconst onAllClickHandler = () => props.changeFilter('all', props.id);\r\n\tconst onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n\tconst onCompletedClickHandler = () => props.changeFilter('completed', props.id);\r\n\tconst changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3>\r\n\t\t\t\t<EditableSpan title={props.title} changeTaskTitle={changeTodoListTitle} />\r\n\t\t\t\t<button onClick={deleteTodolistButton}>X</button>\r\n\t\t\t</h3>\r\n\t\t\t<AddItemForm addItem={addTask} />\r\n\t\t\t<ul>\r\n\t\t\t\t{renderTasks}\r\n\t\t\t</ul>\r\n\t\t\t<div>\r\n\t\t\t\t<button className={props.filter === 'all' ? 'active_filter' : ''} onClick={onAllClickHandler}>All</button>\r\n\t\t\t\t<button className={props.filter === 'active' ? 'active_filter' : ''} onClick={onActiveClickHandler}>Active</button>\r\n\t\t\t\t<button className={props.filter === 'completed' ? 'active_filter' : ''} onClick={onCompletedClickHandler}>Completed</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { AddItemForm } from './Todolist/AddItemForm/AddItemForm';\r\nimport TodoList, { TaskType } from './Todolist/Todolist';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst App = () => {\r\n\r\n    let todolistID_1 = v1();\r\n    let todolistID_2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<TodolistType[]>([\r\n        { id: todolistID_1, title: 'What to learn', filter: 'all', },\r\n        { id: todolistID_2, title: 'What to buy', filter: 'all', }\r\n    ]);\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistID_1]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'React JS', isDone: false },\r\n            { id: v1(), title: 'Rest API', isDone: false },\r\n            { id: v1(), title: 'GraphQL', isDone: false },\r\n        ],\r\n        [todolistID_2]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'React JS', isDone: false },\r\n        ],\r\n    })\r\n\r\n\r\n    function removeTasks(id: string, todolistID: string) {\r\n        const todoListTasks = tasks[todolistID];\r\n        let filteredTasks = todoListTasks.filter(item => item.id !== id);\r\n        tasks[todolistID] = filteredTasks;\r\n        setTasks({ ...tasks })\r\n    }\r\n    function addTasks(title: string, todolistID: string) {\r\n        let newTask: TaskType = { id: v1(), title: title, isDone: false };\r\n        tasks[todolistID] = [newTask, ...tasks[todolistID]]\r\n        setTasks({ ...tasks })\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID]\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n    function changeTitle(id: string, newTitle: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID]\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n    function changeFilter(value: FilterValuesType, todolistID: string) {\r\n        let todolist = todolists.find(item => item.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    function changeTodoListTitle(newTitle: string, todoListId: string) {\r\n        let todolist = todolists.find(item => item.id === todoListId)\r\n        if (todolist) {\r\n            todolist.title = newTitle;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function deleteTodolist(todolistID: string) {\r\n        setTodolists(todolists.filter(item => item.id !== todolistID));\r\n        delete tasks[todolistID];\r\n        setTasks({ ...tasks });\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListId = v1();\r\n        const newTodolist: TodolistType = {\r\n            id: newTodoListId,\r\n            title: title,\r\n            filter: 'all',\r\n        }\r\n        setTodolists([...todolists, newTodolist])\r\n        setTasks({ ...tasks, [newTodoListId]: [] })\r\n    }\r\n\r\n\r\n    const todolistItems = todolists.map(item => {\r\n        let allTasksForTodolist = tasks[item.id];\r\n        let tasksForTodolist = allTasksForTodolist;\r\n\r\n        if (item.filter === 'active') {\r\n            tasksForTodolist = allTasksForTodolist.filter(item => item.isDone === false)\r\n        }\r\n        if (item.filter === 'completed') {\r\n            tasksForTodolist = allTasksForTodolist.filter(item => item.isDone === true)\r\n        }\r\n        return <TodoList\r\n            key={item.id}\r\n            id={item.id}\r\n            filter={item.filter}\r\n            title={item.title}\r\n            tasks={tasksForTodolist}\r\n            changeTitle={changeTitle}\r\n            addTasks={addTasks}\r\n            removeTasks={removeTasks}\r\n            changeFilter={changeFilter}\r\n            changeTodoListTitle={changeTodoListTitle}\r\n            changeTaskStatus={changeStatus}\r\n            deleteTodolist={deleteTodolist}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n            {todolistItems}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
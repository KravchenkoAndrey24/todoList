{"version":3,"sources":["Todolist/AddItemForm/AddItemForm.tsx","Todolist/EditableSpan.tsx","Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","taskTitle","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","title","editMode","setEditMode","changeTaskTitle","autoFocus","onBlur","onDoubleClick","TodoList","renderTasks","tasks","map","item","id","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newTitle","changeTitle","removeTasks","Delete","changeTodoListTitle","deleteTodolist","addTasks","Button","filter","changeFilter","App","todolistID_1","v1","todolistID_2","todolists","setTodolists","setTasks","todolistID","filteredTasks","newTask","changeStatus","task","find","t","todolist","todoListId","todolistItems","allTasksForTodolist","tasksForTodolist","Grid","Paper","style","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListId","newTodolist","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+ZAQO,SAASA,EAAYC,GAA8B,IAAD,EAE5BC,mBAAiB,IAFW,mBAEnDC,EAFmD,KAExCC,EAFwC,OAGhCF,mBAAwB,MAHQ,mBAGnDG,EAHmD,KAG5CC,EAH4C,KAiBpDC,EAAU,WACb,IAAMC,EAAeL,EAAUM,OAC3BD,EACHP,EAAMM,QAAQC,GAEdF,EAAS,qBAEVF,EAAS,KAIV,OACC,6BACC,kBAACM,EAAA,EAAD,CACCC,KAAK,QACLC,QAAQ,WACRC,MAAOV,EACPW,SA5BqB,SAACC,GACxBX,EAASW,EAAEC,cAAcH,QA4BvBI,WAzBuB,SAACF,GAC1BT,EAAS,MACK,UAAVS,EAAEG,KACLX,KAuBCF,QAASA,EACTc,MAAM,QACNC,WAAYf,IACb,kBAACgB,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAAShB,GACpC,kBAACiB,EAAA,EAAD,Q,sBCvCG,SAASC,EAAaxB,GAA+B,IAAD,EAElCC,mBAASD,EAAMyB,OAFmB,mBAErDA,EAFqD,KAE9CtB,EAF8C,OAG5BF,oBAAkB,GAHU,mBAGrDyB,EAHqD,KAG3CC,EAH2C,KA0B1D,OACCD,EACG,kBAACjB,EAAA,EAAD,CAAWE,QAAQ,WAAWD,KAAK,QAAQE,MAAOa,EAAOZ,SAbzC,SAACC,GACpBX,EAASW,EAAEC,cAAcH,QAY0DI,WATjE,SAACF,GACL,UAAVA,EAAEG,MACLU,GAAY,GACZ3B,EAAM4B,gBAAgBH,KAMoFI,WAAS,EAACC,OAnBlG,WACnBH,GAAY,GACZ3B,EAAM4B,gBAAgBH,MAkBnB,0BAAMM,cAvBS,WAClBJ,GAAY,KAsByB3B,EAAMyB,OC2C9BO,MAtDf,SAAkBhC,GACjB,IAAMiC,EAAcjC,EAAMkC,MAAMC,KAAI,SAAAC,GAanC,OACC,yBAAKnB,IAAKmB,EAAKC,GAAIC,UAAWF,EAAKG,OAAS,UAAY,IACvD,kBAACC,EAAA,EAAD,CAAUnB,MAAM,UAAUoB,QAASL,EAAKG,OAAQ1B,SAV1B,SAACC,GACxB,IAAI4B,EAAiB5B,EAAEC,cAAc0B,QACrCzC,EAAM2C,iBAAiBP,EAAKC,GAAIK,EAAgB1C,EAAMqC,OASrD,kBAACb,EAAD,CAAcC,MAAOW,EAAKX,MAAOG,gBAPX,SAACgB,GACxB5C,EAAM6C,YAAYT,EAAKC,GAAIO,EAAU5C,EAAMqC,OAO1C,kBAACjB,EAAA,EAAD,CAAYE,QAfY,WACzBtB,EAAM8C,YAAYV,EAAKC,GAAIrC,EAAMqC,MAe/B,kBAACU,EAAA,EAAD,WAaJ,OACC,6BACC,4BACC,kBAACvB,EAAD,CAAcC,MAAOzB,EAAMyB,MAAOG,gBALT,SAACH,GAAD,OAAmBzB,EAAMgD,oBAAoBvB,EAAOzB,EAAMqC,OAMnF,kBAACjB,EAAA,EAAD,CAAYE,QAVc,kBAAMtB,EAAMiD,eAAejD,EAAMqC,MAW1D,kBAACU,EAAA,EAAD,QAGF,kBAAChD,EAAD,CAAaO,QAfC,SAACmB,GAAoBzB,EAAMkD,SAASzB,EAAOzB,EAAMqC,OAgB/D,6BACEJ,GAEF,6BACC,kBAACkB,EAAA,EAAD,CAAQxC,QAA0B,QAAjBX,EAAMoD,OAAmB,WAAa,OAAQ/B,MAAM,UAAUC,QAlBxD,kBAAMtB,EAAMqD,aAAa,MAAOrD,EAAMqC,MAkB7D,OACA,kBAACc,EAAA,EAAD,CAAQxC,QAA0B,WAAjBX,EAAMoD,OAAsB,WAAa,OAAQ/B,MAAM,UAAUC,QAlBxD,kBAAMtB,EAAMqD,aAAa,SAAUrD,EAAMqC,MAkBnE,UACA,kBAACc,EAAA,EAAD,CAAQxC,QAA0B,cAAjBX,EAAMoD,OAAyB,WAAa,OAAQ/B,MAAM,YAAYC,QAlB1D,kBAAMtB,EAAMqD,aAAa,YAAarD,EAAMqC,MAkBzE,gBCyFWiB,EAjJH,WAAO,IAAD,EAEVC,EAAeC,cACfC,EAAeD,cAHL,EAKkBvD,mBAAyB,CACrD,CAAEoC,GAAIkB,EAAc9B,MAAO,gBAAiB2B,OAAQ,OACpD,CAAEf,GAAIoB,EAAchC,MAAO,cAAe2B,OAAQ,SAPxC,mBAKTM,EALS,KAKEC,EALF,OAUY1D,oBAAQ,mBAC7BsD,EAAe,CACZ,CAAElB,GAAImB,cAAM/B,MAAO,WAAYc,QAAQ,GACvC,CAAEF,GAAImB,cAAM/B,MAAO,KAAMc,QAAQ,GACjC,CAAEF,GAAImB,cAAM/B,MAAO,WAAYc,QAAQ,GACvC,CAAEF,GAAImB,cAAM/B,MAAO,WAAYc,QAAQ,GACvC,CAAEF,GAAImB,cAAM/B,MAAO,UAAWc,QAAQ,KANZ,cAQ7BkB,EAAe,CACZ,CAAEpB,GAAImB,cAAM/B,MAAO,WAAYc,QAAQ,GACvC,CAAEF,GAAImB,cAAM/B,MAAO,KAAMc,QAAQ,GACjC,CAAEF,GAAImB,cAAM/B,MAAO,WAAYc,QAAQ,KAXb,IAVpB,mBAUPL,EAVO,KAUA0B,EAVA,KA4Bd,SAASd,EAAYT,EAAYwB,GAC7B,IACIC,EADkB5B,EAAM2B,GACMT,QAAO,SAAAhB,GAAI,OAAIA,EAAKC,KAAOA,KAC7DH,EAAM2B,GAAcC,EACpBF,EAAS,eAAK1B,IAElB,SAASgB,EAASzB,EAAeoC,GAC7B,IAAIE,EAAoB,CAAE1B,GAAImB,cAAM/B,MAAOA,EAAOc,QAAQ,GAC1DL,EAAM2B,GAAN,CAAqBE,GAArB,mBAAiC7B,EAAM2B,KACvCD,EAAS,eAAK1B,IAElB,SAAS8B,EAAa3B,EAAYE,EAAiBsB,GAC/C,IACII,EADgB/B,EAAM2B,GACDK,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KACxC4B,IACAA,EAAK1B,OAASA,EACdqB,EAAS,eAAK1B,KAGtB,SAASW,EAAYR,EAAYO,EAAkBiB,GAC/C,IACII,EADgB/B,EAAM2B,GACDK,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KACxC4B,IACAA,EAAKxC,MAAQmB,EACbgB,EAAS,eAAK1B,KAGtB,SAASmB,EAAazC,EAAyBiD,GAC3C,IAAIO,EAAWV,EAAUQ,MAAK,SAAA9B,GAAI,OAAIA,EAAKC,KAAOwB,KAC9CO,IACAA,EAAShB,OAASxC,EAClB+C,EAAa,YAAID,KAGzB,SAASV,EAAoBJ,EAAkByB,GAC3C,IAAID,EAAWV,EAAUQ,MAAK,SAAA9B,GAAI,OAAIA,EAAKC,KAAOgC,KAC9CD,IACAA,EAAS3C,MAAQmB,EACjBe,EAAa,YAAID,KAIzB,SAAST,EAAeY,GACpBF,EAAaD,EAAUN,QAAO,SAAAhB,GAAI,OAAIA,EAAKC,KAAOwB,aAC3C3B,EAAM2B,GACbD,EAAS,eAAK1B,IAclB,IAAMoC,EAAgBZ,EAAUvB,KAAI,SAAAC,GAChC,IAAImC,EAAsBrC,EAAME,EAAKC,IACjCmC,EAAmBD,EAQvB,MANoB,WAAhBnC,EAAKgB,SACLoB,EAAmBD,EAAoBnB,QAAO,SAAAhB,GAAI,OAAoB,IAAhBA,EAAKG,WAE3C,cAAhBH,EAAKgB,SACLoB,EAAmBD,EAAoBnB,QAAO,SAAAhB,GAAI,OAAoB,IAAhBA,EAAKG,WAExD,kBAACkC,EAAA,EAAD,CAAMrC,MAAI,GACb,kBAACsC,EAAA,EAAD,CAAOC,MAAO,CAAEC,QAAS,SACrB,kBAAC,EAAD,CACI3D,IAAKmB,EAAKC,GACVA,GAAID,EAAKC,GACTe,OAAQhB,EAAKgB,OACb3B,MAAOW,EAAKX,MACZS,MAAOsC,EACP3B,YAAaA,EACbK,SAAUA,EACVJ,YAAaA,EACbO,aAAcA,EACdL,oBAAqBA,EACrBL,iBAAkBqB,EAClBf,eAAgBA,SAMhC,OACI,yBAAKX,UAAU,OACX,kBAACuC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAAC3D,EAAA,EAAD,CAAY4D,KAAK,QAAQ3D,MAAM,UAAU4D,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYxE,QAAQ,MAApB,QAGA,kBAACwC,EAAA,EAAD,CAAQ9B,MAAM,WAAd,WAGR,kBAAC+D,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACZ,EAAA,EAAD,CAAMa,WAAS,EAACX,MAAO,CAAEC,QAAS,SAC9B,kBAAC7E,EAAD,CAAaO,QAzD7B,SAAqBmB,GACjB,IAAM8D,EAAgB/B,cAChBgC,EAA4B,CAC9BnD,GAAIkD,EACJ9D,MAAOA,EACP2B,OAAQ,OAEZO,EAAa,GAAD,mBAAKD,GAAL,CAAgB8B,KAC5B5B,EAAS,2BAAK1B,GAAN,kBAAcqD,EAAgB,UAmD9B,kBAACd,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CAAMa,WAAS,EAACG,QAAS,GACpBnB,OC9ILoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArG,GACLsG,QAAQtG,MAAMA,EAAMuG,c","file":"static/js/main.3e3be81c.chunk.js","sourcesContent":["import { Button, IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox, Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n\taddItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n\tlet [taskTitle, setTitle] = useState<string>('');\r\n\tlet [error, setError] = useState<string | null>(null)\r\n\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tsetError(null)\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\taddItem()\r\n\t\t}\r\n\t}\r\n\r\n\tlet addItem = () => {\r\n\t\tconst trimmedTitle = taskTitle.trim();\r\n\t\tif (trimmedTitle) {\r\n\t\t\tprops.addItem(trimmedTitle)\r\n\t\t} else {\r\n\t\t\tsetError('Title is required')\r\n\t\t}\r\n\t\tsetTitle('')\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\tsize='small'\r\n\t\t\t\tvariant='outlined'\r\n\t\t\t\tvalue={taskTitle}\r\n\t\t\t\tonChange={onChangeHandler}\r\n\t\t\t\tonKeyPress={onKeyPressHandler}\r\n\t\t\t\terror={!!error}\r\n\t\t\t\tlabel='Title'\r\n\t\t\t\thelperText={error} />\r\n\t\t\t<IconButton color='primary' onClick={addItem}>\r\n\t\t\t\t<AddBox />\r\n\t\t\t</IconButton>\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n\ttitle: string\r\n\tchangeTaskTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n\tlet [title, setTitle] = useState(props.title);\r\n\tlet [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n\r\n\tconst onIditMode = () => {\r\n\t\tsetEditMode(true)\r\n\t}\r\n\tconst offIditMode = () => {\r\n\t\tsetEditMode(false)\r\n\t\tprops.changeTaskTitle(title)\r\n\t}\r\n\r\n\r\n\tconst changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tsetEditMode(false)\r\n\t\t\tprops.changeTaskTitle(title)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\teditMode\r\n\t\t\t? <TextField variant='outlined' size='small' value={title} onChange={changeTitle} onKeyPress={onKeyPress} autoFocus onBlur={offIditMode} />\r\n\t\t\t: <span onDoubleClick={onIditMode}>{props.title}</span>\r\n\r\n\t)\r\n}\r\n\r\n","import { Button, Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { FilterValuesType } from '../App';\r\nimport { AddItemForm } from './AddItemForm/AddItemForm';\r\nimport { EditableSpan } from './EditableSpan';\r\n\r\nexport type TaskType = {\r\n\tid: string,\r\n\ttitle: string,\r\n\tisDone: boolean,\r\n}\r\n\r\nexport type TodolistPropsType = {\r\n\tid: string\r\n\ttitle: string\r\n\ttasks: Array<TaskType>\r\n\tfilter: FilterValuesType\r\n\tremoveTasks: (taskId: string, todolistID: string) => void\r\n\tchangeFilter: (value: FilterValuesType, todolistID: string) => void\r\n\taddTasks: (title: string, todolistID: string) => void\r\n\tchangeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\r\n\tdeleteTodolist: (todolistID: string) => void\r\n\tchangeTodoListTitle: (newTitle: string, todoListId: string) => void\r\n\tchangeTitle: (id: string, title: string, todolistID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodolistPropsType) {\r\n\tconst renderTasks = props.tasks.map(item => {\r\n\r\n\t\tconst onAllClickHandler = () => {\r\n\t\t\tprops.removeTasks(item.id, props.id)\r\n\t\t}\r\n\t\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tlet newIsDoneValue = e.currentTarget.checked;\r\n\t\t\tprops.changeTaskStatus(item.id, newIsDoneValue, props.id)\r\n\t\t}\r\n\t\tconst changeTaskTitle = (newTitle: string) => {\r\n\t\t\tprops.changeTitle(item.id, newTitle, props.id)\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div key={item.id} className={item.isDone ? 'is_done' : ''}>\r\n\t\t\t\t<Checkbox color='primary' checked={item.isDone} onChange={onChangeHandler} />\r\n\t\t\t\t<EditableSpan title={item.title} changeTaskTitle={changeTaskTitle} />\r\n\t\t\t\t<IconButton onClick={onAllClickHandler}>\r\n\t\t\t\t\t<Delete />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\r\n\tconst addTask = (title: string) => { props.addTasks(title, props.id) }\r\n\tconst deleteTodolistButton = () => props.deleteTodolist(props.id);\r\n\tconst onAllClickHandler = () => props.changeFilter('all', props.id);\r\n\tconst onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n\tconst onCompletedClickHandler = () => props.changeFilter('completed', props.id);\r\n\tconst changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3>\r\n\t\t\t\t<EditableSpan title={props.title} changeTaskTitle={changeTodoListTitle} />\r\n\t\t\t\t<IconButton onClick={deleteTodolistButton}>\r\n\t\t\t\t\t<Delete />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</h3>\r\n\t\t\t<AddItemForm addItem={addTask} />\r\n\t\t\t<div>\r\n\t\t\t\t{renderTasks}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Button variant={props.filter === 'all' ? 'outlined' : 'text'} color='default' onClick={onAllClickHandler}>All</Button>\r\n\t\t\t\t<Button variant={props.filter === 'active' ? 'outlined' : 'text'} color='primary' onClick={onActiveClickHandler}>Active</Button>\r\n\t\t\t\t<Button variant={props.filter === 'completed' ? 'outlined' : 'text'} color='secondary' onClick={onCompletedClickHandler}>Completed</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default TodoList;","import { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { AddItemForm } from './Todolist/AddItemForm/AddItemForm';\r\nimport TodoList, { TaskType } from './Todolist/Todolist';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst App = () => {\r\n\r\n    let todolistID_1 = v1();\r\n    let todolistID_2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<TodolistType[]>([\r\n        { id: todolistID_1, title: 'What to learn', filter: 'all', },\r\n        { id: todolistID_2, title: 'What to buy', filter: 'all', }\r\n    ]);\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistID_1]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'React JS', isDone: false },\r\n            { id: v1(), title: 'Rest API', isDone: false },\r\n            { id: v1(), title: 'GraphQL', isDone: false },\r\n        ],\r\n        [todolistID_2]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'React JS', isDone: false },\r\n        ],\r\n    })\r\n\r\n\r\n\r\n\r\n    function removeTasks(id: string, todolistID: string) { // yes\r\n        const todoListTasks = tasks[todolistID];\r\n        let filteredTasks = todoListTasks.filter(item => item.id !== id);\r\n        tasks[todolistID] = filteredTasks;\r\n        setTasks({ ...tasks })\r\n    }\r\n    function addTasks(title: string, todolistID: string) {  // yes\r\n        let newTask: TaskType = { id: v1(), title: title, isDone: false };\r\n        tasks[todolistID] = [newTask, ...tasks[todolistID]]\r\n        setTasks({ ...tasks })\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todolistID: string) {  // yes\r\n        let todolistTasks = tasks[todolistID]\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n    function changeTitle(id: string, newTitle: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID]\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n    function changeFilter(value: FilterValuesType, todolistID: string) {  // yes\r\n        let todolist = todolists.find(item => item.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    function changeTodoListTitle(newTitle: string, todoListId: string) {\r\n        let todolist = todolists.find(item => item.id === todoListId)\r\n        if (todolist) {\r\n            todolist.title = newTitle;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function deleteTodolist(todolistID: string) {  // yes\r\n        setTodolists(todolists.filter(item => item.id !== todolistID));\r\n        delete tasks[todolistID];\r\n        setTasks({ ...tasks });\r\n    }\r\n    function addTodoList(title: string) { // yes\r\n        const newTodoListId = v1();\r\n        const newTodolist: TodolistType = {\r\n            id: newTodoListId,\r\n            title: title,\r\n            filter: 'all',\r\n        }\r\n        setTodolists([...todolists, newTodolist])\r\n        setTasks({ ...tasks, [newTodoListId]: [] })\r\n    }\r\n\r\n\r\n    const todolistItems = todolists.map(item => {\r\n        let allTasksForTodolist = tasks[item.id];\r\n        let tasksForTodolist = allTasksForTodolist;\r\n\r\n        if (item.filter === 'active') {\r\n            tasksForTodolist = allTasksForTodolist.filter(item => item.isDone === false)\r\n        }\r\n        if (item.filter === 'completed') {\r\n            tasksForTodolist = allTasksForTodolist.filter(item => item.isDone === true)\r\n        }\r\n        return <Grid item>\r\n            <Paper style={{ padding: \"10px\" }}>\r\n                <TodoList\r\n                    key={item.id}\r\n                    id={item.id}\r\n                    filter={item.filter}\r\n                    title={item.title}\r\n                    tasks={tasksForTodolist}\r\n                    changeTitle={changeTitle}\r\n                    addTasks={addTasks}\r\n                    removeTasks={removeTasks}\r\n                    changeFilter={changeFilter}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                    changeTaskStatus={changeStatus}\r\n                    deleteTodolist={deleteTodolist}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant='h6'>\r\n                        News\r\n                    </Typography>\r\n                    <Button color='inherit'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: '20px' }}>\r\n                    <AddItemForm addItem={addTodoList} />\r\n                </Grid>\r\n                <Grid>\r\n                    <Grid container spacing={3}>\r\n                        {todolistItems}\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
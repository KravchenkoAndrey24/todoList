{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitile","model","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","then","res","data","items","action","tasks","type","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","App","todos","todolists","useSelector","state","removeTaskAC","removeTaskTC","taskTitle","item","addTaskTC","changeStatus","getState","find","startDate","priority","description","deadline","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","updateTaskTitleTC","removeTodolistAC","changeTodolistTitleAC","updateTodolistTitleTC","addTodolist","titleNewTodolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTasks","todoListId","todolistTasks","newTasksArray","copyState","forEach","addedDate","order","todolist","a","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b2dd977.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '2d65fe0a-1514-46af-a3fa-b8e3058ff155'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title });\r\n\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, { title: title });\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import { TasksStateType } from '../App';\r\nimport { v1 } from 'uuid';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodosActionType } from './todolists-reducer';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI } from '../api/todolists-api'\r\nimport { Dispatch } from 'redux';\r\nimport { AppRootStateType } from './store';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type setTasksActionType = ReturnType<typeof setTasksAC>;\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosActionType\r\n    | setTasksActionType;\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, status: action.status } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, title: action.title } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOS\": {\r\n            const stateCopy = { ...state }\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = { ...state }\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId }\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', task }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', status, todolistId, taskId }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', title, todolistId, taskId }\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return { type: 'SET-TASKS', tasks, todolistId } as const\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                console.log(res.data.items);\r\n\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId);\r\n            dispatch(action);\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, taskTitle)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then(res => {\r\n                    dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const updateTaskTitleTC = (taskId: string, title: string, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const allTasksFromState = getState().tasks;\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId];\r\n    const task = tasksForCurrentTodolist.find(t => {\r\n        return t.id === taskId;\r\n    })\r\n\r\n    if (task) {\r\n        todolistsAPI.updateTask(todolistId, taskId, {\r\n            title: title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status\r\n        })\r\n            .then(res => {\r\n                dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n            })\r\n    }\r\n\r\n\r\n}","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from './AddItemForm'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task'\r\nimport { TaskStatuses, TaskType } from './api/todolists-api'\r\nimport { FilterValuesType } from './state/todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from './state/tasks-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} />\r\n        <div>\r\n            {\r\n\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { Dispatch } from 'redux';\r\nimport { v1 } from 'uuid';\r\nimport { todolistsAPI, TodolistType } from '../api/todolists-api'\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>;\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodosActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOS': {\r\n            let a: TodolistDomainType[] = action.todos.map(tl => {\r\n                return {\r\n                    ...tl, filter: 'all'\r\n                }\r\n            })\r\n            return a\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId }\r\n}\r\nexport const addTodolistAC = (title: string, todolistId: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId }\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title }\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter }\r\n}\r\n\r\nexport const setTodosAC = (todos: TodolistType[]) => {\r\n    return {\r\n        type: 'SET-TODOS',\r\n        todos: todos\r\n    } as const\r\n}\r\n\r\nexport const fetchTodolistTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodosAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId));\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (titleNewTodolist: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(titleNewTodolist)\r\n        .then(res => {\r\n            console.log(res.data.data.item.id);\r\n\r\n            dispatch(addTodolistAC(titleNewTodolist, res.data.data.item.id));\r\n        })\r\n}\r\n\r\n\r\nexport const updateTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(id, title));\r\n        })\r\n}","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    fetchTodolistTC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    removeTodolistTC,\r\n    setTodosAC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from './state/todolists-reducer'\r\nimport { addTaskAC, addTaskTC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC } from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport { TaskStatuses, TaskType, todolistsAPI } from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistTC())\r\n    }, [])\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = updateTaskStatusTC(id, status, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(id, newTitle, todolistId));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(updateTodolistTitleTC(id, title))\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch]);\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"20px\" }}>\r\n                    <AddItemForm addItem={addTodolist} />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{ padding: \"10px\" }}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
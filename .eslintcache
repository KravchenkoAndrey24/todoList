[{"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\index.tsx":"1","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\reportWebVitals.ts":"2","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\api\\todolists-api.ts":"3","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\store.ts":"4","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\App.tsx":"5","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\app-reducer.ts":"6","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\tasks-reducer.ts":"7","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\todolists-reducer.ts":"8","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\Login\\auth-reducer.ts":"9","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\TodolistsList.tsx":"10","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\Login\\Login.tsx":"11","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"12","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\utils\\error-utils.ts":"13","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\AddItemForm\\AddItemForm.tsx":"14","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"15","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"16","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\EditableSpan\\EditableSpan.tsx":"17"},{"size":759,"mtime":1621525120504,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"20","hashOfConfig":"19"},{"size":3230,"mtime":1621538751020,"results":"21","hashOfConfig":"19"},{"size":1192,"mtime":1621534133109,"results":"22","hashOfConfig":"19"},{"size":2581,"mtime":1621538853664,"results":"23","hashOfConfig":"19"},{"size":2135,"mtime":1621538345896,"results":"24","hashOfConfig":"19"},{"size":5633,"mtime":1596722126000,"results":"25","hashOfConfig":"19"},{"size":4585,"mtime":1597327450000,"results":"26","hashOfConfig":"19"},{"size":1758,"mtime":1621538639769,"results":"27","hashOfConfig":"19"},{"size":4069,"mtime":1621536051806,"results":"28","hashOfConfig":"19"},{"size":2974,"mtime":1621535310406,"results":"29","hashOfConfig":"19"},{"size":1092,"mtime":1596716576000,"results":"30","hashOfConfig":"19"},{"size":811,"mtime":1596719330000,"results":"31","hashOfConfig":"19"},{"size":1595,"mtime":1596715562000,"results":"32","hashOfConfig":"19"},{"size":4193,"mtime":1596715250000,"results":"33","hashOfConfig":"19"},{"size":1773,"mtime":1596295538000,"results":"34","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wnty4c",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\index.tsx",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\reportWebVitals.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\api\\todolists-api.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\store.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\App.tsx",["78"],"import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport { Login } from '../features/Login/Login'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    const appLogOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={appLogOut} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route path={'/login'} render={() => <Login />} />\r\n\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Redirect from={'*'} to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\app-reducer.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\tasks-reducer.ts",["79","80"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\todolists-reducer.ts",["81"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\Login\\auth-reducer.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\TodolistsList.tsx",["82","83","84","85","86","87","88","89"],"import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n\r\n\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, { status }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, { title: newTitle }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{ padding: '20px' }}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: '10px' }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\Login\\Login.tsx",["90"],"import React from 'react'\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { loginTC } from './auth-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router'\r\n\r\ntype FormikErrorType = {\r\n\temail?: string\r\n\tpassword?: string\r\n\trememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\tconst dispatch = useDispatch();\r\n\r\n\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {}\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'Required'\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address';\r\n\t\t\t}\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Введите ваш пароль'\r\n\t\t\t} /* else if (!/^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&*])(?=.*[0-9].*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{8,}$/i.test(values.password)) {\r\n\t\t\t\terrors.password = 'Invalid password'\r\n\t\t\t} */\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(loginTC(values));\r\n\t\t\tformik.resetForm();\r\n\t\t}\r\n\t})\r\n\r\n\r\n\tif (isLoggedIn) {\r\n\t\treturn <Redirect to={'/'} />\r\n\t}\r\n\r\n\treturn <Grid container justify=\"center\">\r\n\t\t<Grid item xs={4}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<FormControl>\r\n\t\t\t\t\t<FormLabel>\r\n\t\t\t\t\t\t<p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n\t\t\t\t\t\t\t\ttarget={'_blank'}>here\r\n                    </a>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>or use common test account credentials:</p>\r\n\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\r\n\t\t\t\t\t\t<p>Password: free</p>\r\n\t\t\t\t\t</FormLabel>\r\n\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\ttype='email'\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t// name='email'\r\n\t\t\t\t\t\t// onBlur={formik.handleBlur}\r\n\t\t\t\t\t\t// onChange={formik.handleChange}\r\n\t\t\t\t\t\t// value={formik.values.email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.email && formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.password && formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tlabel={'Remember me'}\r\n\t\t\t\t\t\t\tcontrol={<Checkbox\r\n\t\t\t\t\t\t\t\tname='rememberMe'\r\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={formik.values.rememberMe}\r\n\t\t\t\t\t\t\t/>}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n\t\t\t\t\t</FormGroup>\r\n\t\t\t\t</FormControl>\r\n\t\t\t</form>\r\n\t\t</Grid>\r\n\t</Grid>\r\n}\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\utils\\error-utils.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\AddItemForm\\AddItemForm.tsx",["91","92","93"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["94","95","96","97","98","99"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["100","101","102"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"103","severity":1,"message":"104","line":28,"column":8,"nodeType":"105","endLine":28,"endColumn":10,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":5,"column":9,"nodeType":"109","messageId":"110","endLine":5,"endColumn":22},{"ruleId":"111","severity":1,"message":"112","line":13,"column":94,"nodeType":"113","messageId":"114","endLine":13,"endColumn":96},{"ruleId":"111","severity":1,"message":"112","line":10,"column":45,"nodeType":"113","messageId":"114","endLine":10,"endColumn":47},{"ruleId":"103","severity":1,"message":"115","line":42,"column":8,"nodeType":"105","endLine":42,"endColumn":10,"suggestions":"116"},{"ruleId":"103","severity":1,"message":"117","line":47,"column":8,"nodeType":"105","endLine":47,"endColumn":10,"suggestions":"118"},{"ruleId":"103","severity":1,"message":"117","line":52,"column":8,"nodeType":"105","endLine":52,"endColumn":10,"suggestions":"119"},{"ruleId":"103","severity":1,"message":"117","line":57,"column":8,"nodeType":"105","endLine":57,"endColumn":10,"suggestions":"120"},{"ruleId":"103","severity":1,"message":"117","line":62,"column":8,"nodeType":"105","endLine":62,"endColumn":10,"suggestions":"121"},{"ruleId":"103","severity":1,"message":"117","line":67,"column":8,"nodeType":"105","endLine":67,"endColumn":10,"suggestions":"122"},{"ruleId":"103","severity":1,"message":"117","line":72,"column":8,"nodeType":"105","endLine":72,"endColumn":10,"suggestions":"123"},{"ruleId":"103","severity":1,"message":"117","line":77,"column":8,"nodeType":"105","endLine":77,"endColumn":10,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":59,"column":21,"nodeType":"127","messageId":"128","endLine":60,"endColumn":27,"fix":"129"},{"ruleId":"107","severity":1,"message":"130","line":2,"column":9,"nodeType":"109","messageId":"110","endLine":2,"endColumn":12},{"ruleId":"107","severity":1,"message":"131","line":2,"column":14,"nodeType":"109","messageId":"110","endLine":2,"endColumn":20},{"ruleId":"107","severity":1,"message":"132","line":2,"column":22,"nodeType":"109","messageId":"110","endLine":2,"endColumn":33},{"ruleId":"103","severity":1,"message":"133","line":35,"column":8,"nodeType":"105","endLine":35,"endColumn":10,"suggestions":"134"},{"ruleId":"103","severity":1,"message":"135","line":39,"column":8,"nodeType":"105","endLine":39,"endColumn":42,"suggestions":"136"},{"ruleId":"103","severity":1,"message":"135","line":46,"column":8,"nodeType":"105","endLine":46,"endColumn":54,"suggestions":"137"},{"ruleId":"103","severity":1,"message":"135","line":48,"column":95,"nodeType":"105","endLine":48,"endColumn":134,"suggestions":"138"},{"ruleId":"103","severity":1,"message":"135","line":49,"column":101,"nodeType":"105","endLine":49,"endColumn":140,"suggestions":"139"},{"ruleId":"103","severity":1,"message":"135","line":50,"column":107,"nodeType":"105","endLine":50,"endColumn":146,"suggestions":"140"},{"ruleId":"103","severity":1,"message":"135","line":15,"column":97,"nodeType":"105","endLine":15,"endColumn":130,"suggestions":"141"},{"ruleId":"103","severity":1,"message":"135","line":20,"column":8,"nodeType":"105","endLine":20,"endColumn":41,"suggestions":"142"},{"ruleId":"103","severity":1,"message":"135","line":24,"column":8,"nodeType":"105","endLine":24,"endColumn":41,"suggestions":"143"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["144"],"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["145"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["146"],["147"],["148"],["149"],["150"],["151"],["152"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"153","text":"154"},"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["155"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["156"],["157"],["158"],["159"],["160"],["161"],["162"],["163"],{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"164","fix":"168"},{"desc":"164","fix":"169"},{"desc":"164","fix":"170"},{"desc":"164","fix":"171"},{"desc":"164","fix":"172"},{"desc":"164","fix":"173"},{"desc":"164","fix":"174"},[1706,1706]," rel=\"noreferrer\"",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"177","fix":"179"},{"desc":"177","fix":"180"},{"desc":"177","fix":"181"},{"desc":"177","fix":"182"},{"desc":"177","fix":"183"},{"desc":"177","fix":"184"},{"desc":"177","fix":"185"},"Update the dependencies array to be: [dispatch]",{"range":"186","text":"187"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"188","text":"189"},{"range":"190","text":"187"},{"range":"191","text":"187"},{"range":"192","text":"187"},{"range":"193","text":"187"},{"range":"194","text":"187"},{"range":"195","text":"187"},{"range":"196","text":"187"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"197","text":"198"},"Update the dependencies array to be: [props]",{"range":"199","text":"200"},{"range":"201","text":"200"},{"range":"202","text":"200"},{"range":"203","text":"200"},{"range":"204","text":"200"},{"range":"205","text":"200"},{"range":"206","text":"200"},{"range":"207","text":"200"},[1218,1220],"[dispatch]",[1354,1356],"[demo, dispatch, isLoggedIn]",[1525,1527],[1696,1698],[1903,1905],[2118,2120],[2319,2321],[2466,2468],[2645,2647],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],"[props]",[1846,1892],[1991,2030],[2133,2172],[2281,2320],[765,798],[1071,1104],[1261,1294]]
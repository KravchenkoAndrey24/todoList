[{"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\index.tsx":"1","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\reportWebVitals.ts":"2","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\state\\store.ts":"3","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\App.tsx":"4","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\state\\tasks-reducer.ts":"5","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\state\\todolists-reducer.ts":"6","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\AddItemForm.tsx":"7","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\Todolist.tsx":"8","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\api\\todolists-api.ts":"9","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\EditableSpan.tsx":"10","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\Task.tsx":"11"},{"size":641,"mtime":1611424226000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1607869388000,"results":"14","hashOfConfig":"13"},{"size":973,"mtime":1620319729103,"results":"15","hashOfConfig":"13"},{"size":4684,"mtime":1620414023424,"results":"16","hashOfConfig":"13"},{"size":8123,"mtime":1620415067766,"results":"17","hashOfConfig":"13"},{"size":4497,"mtime":1620415434929,"results":"18","hashOfConfig":"13"},{"size":1474,"mtime":1594727720000,"results":"19","hashOfConfig":"13"},{"size":3666,"mtime":1620413264200,"results":"20","hashOfConfig":"13"},{"size":2522,"mtime":1620412255423,"results":"21","hashOfConfig":"13"},{"size":953,"mtime":1620312802329,"results":"22","hashOfConfig":"13"},{"size":1729,"mtime":1596076630000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wnty4c",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\index.tsx",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\reportWebVitals.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\state\\store.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\App.tsx",["52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68"],"import React, { useCallback, useEffect } from 'react'\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    fetchTodolistTC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    removeTodolistTC,\r\n    setTodosAC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from './state/todolists-reducer'\r\nimport { addTaskAC, addTaskTC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC } from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport { TaskStatuses, TaskType, todolistsAPI } from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistTC())\r\n    }, [])\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = updateTaskStatusTC(id, status, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(id, newTitle, todolistId));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(updateTodolistTitleTC(id, title))\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch]);\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"20px\" }}>\r\n                    <AddItemForm addItem={addTodolist} />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{ padding: \"10px\" }}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\state\\tasks-reducer.ts",["69","70"],"import { TasksStateType } from '../App';\r\nimport { v1 } from 'uuid';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodosActionType } from './todolists-reducer';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI } from '../api/todolists-api'\r\nimport { Dispatch } from 'redux';\r\nimport { AppRootStateType } from './store';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type setTasksActionType = ReturnType<typeof setTasksAC>;\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosActionType\r\n    | setTasksActionType;\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, status: action.status } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, title: action.title } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOS\": {\r\n            const stateCopy = { ...state }\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = { ...state }\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId }\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', task }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', status, todolistId, taskId }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', title, todolistId, taskId }\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return { type: 'SET-TASKS', tasks, todolistId } as const\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                console.log(res.data.items);\r\n\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId);\r\n            dispatch(action);\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, taskTitle)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then(res => {\r\n                    dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const updateTaskTitleTC = (taskId: string, title: string, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const allTasksFromState = getState().tasks;\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId];\r\n    const task = tasksForCurrentTodolist.find(t => {\r\n        return t.id === taskId;\r\n    })\r\n\r\n    if (task) {\r\n        todolistsAPI.updateTask(todolistId, taskId, {\r\n            title: title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status\r\n        })\r\n            .then(res => {\r\n                dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n            })\r\n    }\r\n\r\n\r\n}","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\state\\todolists-reducer.ts",["71"],"import { Dispatch } from 'redux';\r\nimport { v1 } from 'uuid';\r\nimport { todolistsAPI, TodolistType } from '../api/todolists-api'\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>;\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodosActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOS': {\r\n            let a: TodolistDomainType[] = action.todos.map(tl => {\r\n                return {\r\n                    ...tl, filter: 'all'\r\n                }\r\n            })\r\n            return a\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId }\r\n}\r\nexport const addTodolistAC = (title: string, todolistId: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId }\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title }\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter }\r\n}\r\n\r\nexport const setTodosAC = (todos: TodolistType[]) => {\r\n    return {\r\n        type: 'SET-TODOS',\r\n        todos: todos\r\n    } as const\r\n}\r\n\r\nexport const fetchTodolistTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodosAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId));\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (titleNewTodolist: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(titleNewTodolist)\r\n        .then(res => {\r\n            console.log(res.data.data.item.id);\r\n\r\n            dispatch(addTodolistAC(titleNewTodolist, res.data.data.item.id));\r\n        })\r\n}\r\n\r\n\r\nexport const updateTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(id, title));\r\n        })\r\n}","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\AddItemForm.tsx",["72","73","74"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\Todolist.tsx",["75","76","77","78","79","80"],"import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from './AddItemForm'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task'\r\nimport { TaskStatuses, TaskType } from './api/todolists-api'\r\nimport { FilterValuesType } from './state/todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from './state/tasks-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} />\r\n        <div>\r\n            {\r\n\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\api\\todolists-api.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\EditableSpan.tsx",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\Task.tsx",["81","82","83"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n",{"ruleId":"84","severity":1,"message":"85","line":8,"column":5,"nodeType":"86","messageId":"87","endLine":8,"endColumn":18},{"ruleId":"84","severity":1,"message":"88","line":11,"column":5,"nodeType":"86","messageId":"87","endLine":11,"endColumn":26},{"ruleId":"84","severity":1,"message":"89","line":14,"column":5,"nodeType":"86","messageId":"87","endLine":14,"endColumn":21},{"ruleId":"84","severity":1,"message":"90","line":16,"column":5,"nodeType":"86","messageId":"87","endLine":16,"endColumn":15},{"ruleId":"84","severity":1,"message":"91","line":20,"column":10,"nodeType":"86","messageId":"87","endLine":20,"endColumn":19},{"ruleId":"84","severity":1,"message":"92","line":20,"column":32,"nodeType":"86","messageId":"87","endLine":20,"endColumn":50},{"ruleId":"84","severity":1,"message":"93","line":20,"column":52,"nodeType":"86","messageId":"87","endLine":20,"endColumn":69},{"ruleId":"84","severity":1,"message":"94","line":20,"column":71,"nodeType":"86","messageId":"87","endLine":20,"endColumn":83},{"ruleId":"84","severity":1,"message":"95","line":23,"column":34,"nodeType":"86","messageId":"87","endLine":23,"endColumn":46},{"ruleId":"96","severity":1,"message":"97","line":35,"column":8,"nodeType":"98","endLine":35,"endColumn":10,"suggestions":"99"},{"ruleId":"96","severity":1,"message":"100","line":44,"column":8,"nodeType":"98","endLine":44,"endColumn":10,"suggestions":"101"},{"ruleId":"96","severity":1,"message":"100","line":48,"column":8,"nodeType":"98","endLine":48,"endColumn":10,"suggestions":"102"},{"ruleId":"96","severity":1,"message":"100","line":53,"column":8,"nodeType":"98","endLine":53,"endColumn":10,"suggestions":"103"},{"ruleId":"96","severity":1,"message":"100","line":57,"column":8,"nodeType":"98","endLine":57,"endColumn":10,"suggestions":"104"},{"ruleId":"96","severity":1,"message":"100","line":62,"column":8,"nodeType":"98","endLine":62,"endColumn":10,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"100","line":66,"column":8,"nodeType":"98","endLine":66,"endColumn":10,"suggestions":"106"},{"ruleId":"96","severity":1,"message":"100","line":70,"column":8,"nodeType":"98","endLine":70,"endColumn":10,"suggestions":"107"},{"ruleId":"84","severity":1,"message":"108","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":12},{"ruleId":"84","severity":1,"message":"109","line":4,"column":10,"nodeType":"86","messageId":"87","endLine":4,"endColumn":24},{"ruleId":"84","severity":1,"message":"108","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":12},{"ruleId":"84","severity":1,"message":"110","line":2,"column":9,"nodeType":"86","messageId":"87","endLine":2,"endColumn":12},{"ruleId":"84","severity":1,"message":"111","line":2,"column":14,"nodeType":"86","messageId":"87","endLine":2,"endColumn":20},{"ruleId":"84","severity":1,"message":"112","line":2,"column":22,"nodeType":"86","messageId":"87","endLine":2,"endColumn":33},{"ruleId":"96","severity":1,"message":"113","line":34,"column":8,"nodeType":"98","endLine":34,"endColumn":10,"suggestions":"114"},{"ruleId":"96","severity":1,"message":"115","line":38,"column":8,"nodeType":"98","endLine":38,"endColumn":33,"suggestions":"116"},{"ruleId":"96","severity":1,"message":"115","line":45,"column":8,"nodeType":"98","endLine":45,"endColumn":45,"suggestions":"117"},{"ruleId":"96","severity":1,"message":"115","line":47,"column":86,"nodeType":"98","endLine":47,"endColumn":116,"suggestions":"118"},{"ruleId":"96","severity":1,"message":"115","line":48,"column":92,"nodeType":"98","endLine":48,"endColumn":122,"suggestions":"119"},{"ruleId":"96","severity":1,"message":"115","line":49,"column":98,"nodeType":"98","endLine":49,"endColumn":128,"suggestions":"120"},{"ruleId":"96","severity":1,"message":"115","line":15,"column":97,"nodeType":"98","endLine":15,"endColumn":130,"suggestions":"121"},{"ruleId":"96","severity":1,"message":"115","line":20,"column":8,"nodeType":"98","endLine":20,"endColumn":41,"suggestions":"122"},{"ruleId":"96","severity":1,"message":"115","line":24,"column":8,"nodeType":"98","endLine":24,"endColumn":41,"suggestions":"123"},"@typescript-eslint/no-unused-vars","'addTodolistAC' is defined but never used.","Identifier","unusedVar","'changeTodolistTitleAC' is defined but never used.","'removeTodolistAC' is defined but never used.","'setTodosAC' is defined but never used.","'addTaskAC' is defined but never used.","'changeTaskStatusAC' is defined but never used.","'changeTaskTitleAC' is defined but never used.","'removeTaskAC' is defined but never used.","'todolistsAPI' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["124"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["125"],["126"],["127"],["128"],["129"],["130"],["131"],"'v1' is defined but never used.","'TaskPriorities' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["132"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["133"],["134"],["135"],["136"],["137"],["138"],["139"],["140"],{"desc":"141","fix":"142"},{"desc":"141","fix":"143"},{"desc":"141","fix":"144"},{"desc":"141","fix":"145"},{"desc":"141","fix":"146"},{"desc":"141","fix":"147"},{"desc":"141","fix":"148"},{"desc":"141","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"152","fix":"154"},{"desc":"152","fix":"155"},{"desc":"152","fix":"156"},{"desc":"152","fix":"157"},{"desc":"152","fix":"158"},{"desc":"152","fix":"159"},{"desc":"152","fix":"160"},"Update the dependencies array to be: [dispatch]",{"range":"161","text":"162"},{"range":"163","text":"162"},{"range":"164","text":"162"},{"range":"165","text":"162"},{"range":"166","text":"162"},{"range":"167","text":"162"},{"range":"168","text":"162"},{"range":"169","text":"162"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"170","text":"171"},"Update the dependencies array to be: [props]",{"range":"172","text":"173"},{"range":"174","text":"173"},{"range":"175","text":"173"},{"range":"176","text":"173"},{"range":"177","text":"173"},{"range":"178","text":"173"},{"range":"179","text":"173"},{"range":"180","text":"173"},[1138,1140],"[dispatch]",[1515,1517],[1659,1661],[1873,1875],[2055,2057],[2259,2261],[2379,2381],[2530,2532],[1308,1310],"[dispatch, props.id]",[1416,1441],"[props]",[1654,1691],[1781,1811],[1905,1935],[2035,2065],[721,754],[1027,1060],[1217,1250]]
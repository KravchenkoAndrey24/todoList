[{"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\index.tsx":"1","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\reportWebVitals.ts":"2","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\api\\todolists-api.ts":"3","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\store.ts":"4","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\App.tsx":"5","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\app-reducer.ts":"6","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\tasks-reducer.ts":"7","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\todolists-reducer.ts":"8","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\Login\\auth-reducer.ts":"9","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\TodolistsList.tsx":"10","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\Login\\Login.tsx":"11","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"12","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\utils\\error-utils.ts":"13","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\AddItemForm\\AddItemForm.tsx":"14","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"15","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"16","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\EditableSpan\\EditableSpan.tsx":"17"},{"size":759,"mtime":1621525120504,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"20","hashOfConfig":"19"},{"size":3230,"mtime":1622138231637,"results":"21","hashOfConfig":"19"},{"size":1432,"mtime":1622745262979,"results":"22","hashOfConfig":"19"},{"size":2601,"mtime":1622115925772,"results":"23","hashOfConfig":"19"},{"size":2939,"mtime":1622910814274,"results":"24","hashOfConfig":"19"},{"size":7791,"mtime":1622918480069,"results":"25","hashOfConfig":"19"},{"size":6268,"mtime":1622918327345,"results":"26","hashOfConfig":"19"},{"size":2077,"mtime":1622908596406,"results":"27","hashOfConfig":"19"},{"size":4085,"mtime":1622914746700,"results":"28","hashOfConfig":"19"},{"size":2982,"mtime":1622114617404,"results":"29","hashOfConfig":"19"},{"size":1111,"mtime":1622908688555,"results":"30","hashOfConfig":"19"},{"size":731,"mtime":1622913124135,"results":"31","hashOfConfig":"19"},{"size":1595,"mtime":1596715562000,"results":"32","hashOfConfig":"19"},{"size":4175,"mtime":1622131857351,"results":"33","hashOfConfig":"19"},{"size":1789,"mtime":1622136406543,"results":"34","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1wnty4c",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\index.tsx",[],["77","78"],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\reportWebVitals.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\api\\todolists-api.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\store.ts",["79","80"],"import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport { authReducer } from '../features/Login/auth-reducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunkMiddleware)\r\n})\r\n\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\App.tsx",["81"],"import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport { Login } from '../features/Login/Login'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    const appLogOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={appLogOut} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/todoList'} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route exact path={'/login'} render={() => <Login />} />\r\n\r\n                    <Route exact path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Redirect from={'*'} to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\app\\app-reducer.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\tasks-reducer.ts",["82"],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\Login\\auth-reducer.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\TodolistsList.tsx",["83","84","85","86","87","88","89","90"],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\Login\\Login.tsx",["91"],"import React from 'react'\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { loginTC } from './auth-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router'\r\n\r\ntype FormikErrorType = {\r\n\temail?: string\r\n\tpassword?: string\r\n\trememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\tconst dispatch = useDispatch();\r\n\r\n\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {}\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'Required'\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address';\r\n\t\t\t}\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Введите ваш пароль'\r\n\t\t\t} /* else if (!/^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&*])(?=.*[0-9].*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{8,}$/i.test(values.password)) {\r\n\t\t\t\terrors.password = 'Invalid password'\r\n\t\t\t} */\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(loginTC(values));\r\n\t\t\tformik.resetForm();\r\n\t\t}\r\n\t})\r\n\r\n\r\n\tif (isLoggedIn) {\r\n\t\treturn <Redirect to={'/todoList'} />\r\n\t}\r\n\r\n\treturn <Grid container justify=\"center\">\r\n\t\t<Grid item xs={4}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<FormControl>\r\n\t\t\t\t\t<FormLabel>\r\n\t\t\t\t\t\t<p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n\t\t\t\t\t\t\t\ttarget={'_blank'}>here\r\n                    </a>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>or use common test account credentials:</p>\r\n\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\r\n\t\t\t\t\t\t<p>Password: free</p>\r\n\t\t\t\t\t</FormLabel>\r\n\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\ttype='email'\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t// name='email'\r\n\t\t\t\t\t\t// onBlur={formik.handleBlur}\r\n\t\t\t\t\t\t// onChange={formik.handleChange}\r\n\t\t\t\t\t\t// value={formik.values.email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.email && formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.password && formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tlabel={'Remember me'}\r\n\t\t\t\t\t\t\tcontrol={<Checkbox\r\n\t\t\t\t\t\t\t\tname='rememberMe'\r\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={formik.values.rememberMe}\r\n\t\t\t\t\t\t\t/>}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n\t\t\t\t\t</FormGroup>\r\n\t\t\t\t</FormControl>\r\n\t\t\t</form>\r\n\t\t</Grid>\r\n\t</Grid>\r\n}\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\utils\\error-utils.ts",[],"D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\AddItemForm\\AddItemForm.tsx",["92","93","94"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["95","96","97","98","99","100"],"import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ demo = false, ...props }: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["101","102","103"],"import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\Main_TodoList\\it-incubator-todolist-ts-01\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":25},{"ruleId":"108","severity":1,"message":"112","line":3,"column":44,"nodeType":"110","messageId":"111","endLine":3,"endColumn":55},{"ruleId":"113","severity":1,"message":"114","line":28,"column":8,"nodeType":"115","endLine":28,"endColumn":10,"suggestions":"116"},{"ruleId":"108","severity":1,"message":"117","line":192,"column":6,"nodeType":"110","messageId":"111","endLine":192,"endColumn":19},{"ruleId":"113","severity":1,"message":"118","line":42,"column":8,"nodeType":"115","endLine":42,"endColumn":10,"suggestions":"119"},{"ruleId":"113","severity":1,"message":"120","line":47,"column":8,"nodeType":"115","endLine":47,"endColumn":10,"suggestions":"121"},{"ruleId":"113","severity":1,"message":"120","line":52,"column":8,"nodeType":"115","endLine":52,"endColumn":10,"suggestions":"122"},{"ruleId":"113","severity":1,"message":"120","line":57,"column":8,"nodeType":"115","endLine":57,"endColumn":10,"suggestions":"123"},{"ruleId":"113","severity":1,"message":"120","line":62,"column":8,"nodeType":"115","endLine":62,"endColumn":10,"suggestions":"124"},{"ruleId":"113","severity":1,"message":"120","line":67,"column":8,"nodeType":"115","endLine":67,"endColumn":10,"suggestions":"125"},{"ruleId":"113","severity":1,"message":"120","line":72,"column":8,"nodeType":"115","endLine":72,"endColumn":10,"suggestions":"126"},{"ruleId":"113","severity":1,"message":"120","line":77,"column":8,"nodeType":"115","endLine":77,"endColumn":10,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":59,"column":21,"nodeType":"130","messageId":"131","endLine":60,"endColumn":27,"fix":"132"},{"ruleId":"108","severity":1,"message":"133","line":2,"column":9,"nodeType":"110","messageId":"111","endLine":2,"endColumn":12},{"ruleId":"108","severity":1,"message":"134","line":2,"column":14,"nodeType":"110","messageId":"111","endLine":2,"endColumn":20},{"ruleId":"108","severity":1,"message":"135","line":2,"column":22,"nodeType":"110","messageId":"111","endLine":2,"endColumn":33},{"ruleId":"113","severity":1,"message":"136","line":35,"column":8,"nodeType":"115","endLine":35,"endColumn":10,"suggestions":"137"},{"ruleId":"113","severity":1,"message":"138","line":39,"column":8,"nodeType":"115","endLine":39,"endColumn":42,"suggestions":"139"},{"ruleId":"113","severity":1,"message":"138","line":46,"column":8,"nodeType":"115","endLine":46,"endColumn":54,"suggestions":"140"},{"ruleId":"113","severity":1,"message":"138","line":48,"column":95,"nodeType":"115","endLine":48,"endColumn":134,"suggestions":"141"},{"ruleId":"113","severity":1,"message":"138","line":49,"column":101,"nodeType":"115","endLine":49,"endColumn":140,"suggestions":"142"},{"ruleId":"113","severity":1,"message":"138","line":50,"column":107,"nodeType":"115","endLine":50,"endColumn":146,"suggestions":"143"},{"ruleId":"113","severity":1,"message":"138","line":16,"column":97,"nodeType":"115","endLine":16,"endColumn":130,"suggestions":"144"},{"ruleId":"113","severity":1,"message":"138","line":22,"column":8,"nodeType":"115","endLine":22,"endColumn":41,"suggestions":"145"},{"ruleId":"113","severity":1,"message":"138","line":26,"column":8,"nodeType":"115","endLine":26,"endColumn":41,"suggestions":"146"},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"@typescript-eslint/no-unused-vars","'applyMiddleware' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["149"],"'ThunkDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["150"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["151"],["152"],["153"],["154"],["155"],["156"],["157"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"158","text":"159"},"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["160"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["161"],["162"],["163"],["164"],["165"],["166"],["167"],["168"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"169","fix":"173"},{"desc":"169","fix":"174"},{"desc":"169","fix":"175"},{"desc":"169","fix":"176"},{"desc":"169","fix":"177"},{"desc":"169","fix":"178"},{"desc":"169","fix":"179"},[1714,1714]," rel=\"noreferrer\"",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"182","fix":"184"},{"desc":"182","fix":"185"},{"desc":"182","fix":"186"},{"desc":"182","fix":"187"},{"desc":"182","fix":"188"},{"desc":"182","fix":"189"},{"desc":"182","fix":"190"},"Update the dependencies array to be: [dispatch]",{"range":"191","text":"192"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"193","text":"194"},{"range":"195","text":"192"},{"range":"196","text":"192"},{"range":"197","text":"192"},{"range":"198","text":"192"},{"range":"199","text":"192"},{"range":"200","text":"192"},{"range":"201","text":"192"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"202","text":"203"},"Update the dependencies array to be: [props]",{"range":"204","text":"205"},{"range":"206","text":"205"},{"range":"207","text":"205"},{"range":"208","text":"205"},{"range":"209","text":"205"},{"range":"210","text":"205"},{"range":"211","text":"205"},{"range":"212","text":"205"},[1218,1220],"[dispatch]",[1354,1356],"[demo, dispatch, isLoggedIn]",[1525,1527],[1696,1698],[1903,1905],[2118,2120],[2335,2337],[2482,2484],[2661,2663],[1486,1488],"[demo, dispatch, props.todolist.id]",[1603,1637],"[props]",[1868,1914],[2013,2052],[2155,2194],[2303,2342],[777,810],[1085,1118],[1275,1308]]